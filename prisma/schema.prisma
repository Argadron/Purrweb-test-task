// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @unique @default(autoincrement()) 
  email String @unique 
  password String 

  columns Column[]
  cards Card[]
  comments Comment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user")
}

model Column {
  id Int @id @unique @default(autoincrement())
  header String 

  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])
  cards Card[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("column")
}

model Card {
  id Int @unique @default(autoincrement())
  header String 
  description String
  status CardStatusEnum @default(NOT_COMPLETED)

  columnId Int @map("column_id")
  column Column @relation(fields: [columnId], references: [id])
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("card")
}

model Comment {
  id Int @unique @default(autoincrement())
  text String 

  authorId Int 
  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("comment")
}

enum CardStatusEnum {
  NOT_COMPLETED
  COMPLETED
}